From 28b2acb0f02b648b053d3150de702c913bedd8e4 Mon Sep 17 00:00:00 2001
From: igrekster <igrek+github@fastem.com>
Date: Thu, 21 Jun 2018 00:13:06 +1000
Subject: [PATCH 12/24] Infinality 2.9 (src/base/ftinf_rh.c)

---
 src/base/ftinf_rh.c                |  626 +++++++
 1 file changed, 626 insertions(+), 0 deletions(-)
 create mode 100644 src/base/ftinf_rh.c

diff --git a/src/base/ftinf_rh.c b/src/base/ftinf_rh.c
new file mode 100644
index 000000000..606b5671a
--- /dev/null
+++ b/src/base/ftinf_rh.c
@@ -0,0 +1,626 @@
+/* ANSI-C code produced by gperf version 3.1 */
+/* Command-line: gperf --output-file=ftinf_rh.c ftinf_rh.gperf  */
+/* Computed positions: -k'1,$' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#endif
+
+#line 9 "ftinf_rh.gperf"
+
+#include <ctype.h>
+static const struct sa_rules_s* _rules_get( const char*str, unsigned len );
+/* maximum key range = 82, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+_rules_hash (register const char *str, register unsigned int len)
+{
+  static const unsigned char asso_values[] =
+    {
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85,  0, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85,  5, 45,  5,
+      35, 25, 35, 35, 50, 45, 85, 85,  0, 25,
+      40,  5,  0, 85, 50, 20, 20,  0, 10, 10,
+      85, 10, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
+      85, 85, 85, 85, 85, 85
+    };
+  return len + asso_values[(unsigned char)str[len - 1]] + asso_values[(unsigned char)str[0]];
+}
+
+#ifdef __GNUC__
+__inline
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
+#endif
+const struct sa_rules_s *
+_rules_get (register const char *str, register unsigned int len)
+{
+  enum
+    {
+      TOTAL_KEYWORDS = 58,
+      MIN_WORD_LENGTH = 3,
+      MAX_WORD_LENGTH = 24,
+      MIN_HASH_VALUE = 3,
+      MAX_HASH_VALUE = 84
+    };
+
+  static const struct sa_rules_s wordlist[] =
+    {
+#line 15 "ftinf_rh.gperf"
+{   .name="---",
+    .synthesize_stems={on, 13, 13, end}
+},
+#line 253 "ftinf_rh.gperf"
+{   .name="ubuntu",
+    .always_use_100={on, 12, 13, 15, 15, end}
+},
+#line 31 "ftinf_rh.gperf"
+{   .name="arial",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 11, 23, 25, 30, end},
+    .start={on, 11, 18, 23, 30, 30, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, 16, -24, end}
+},
+#line 87 "ftinf_rh.gperf"
+{   .name="corbel",
+    .stem_translating_only={on, 10, 16, end},
+    .stem_widths={on, 10, 21, maxp}
+},
+#line 71 "ftinf_rh.gperf"
+{   .name="canwell",
+    .stem_scaling={on, 13, 0, end}
+},
+#line 216 "ftinf_rh.gperf"
+{   .name="pragmata",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 67 "ftinf_rh.gperf"
+{   .name="cantarell",
+    .stem_translating_only={on, 11, 0, 12, 0, end},
+    .stem_widths={on, 10, 22, maxp,}
+},
+#line 39 "ftinf_rh.gperf"
+{   .name="arimo",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end}
+},
+#line 207 "ftinf_rh.gperf"
+{   .name="optima",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 10, 0, 11, 0, 12, 0, end}
+},
+#line 63 "ftinf_rh.gperf"
+{   .name="candara",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, end}
+},
+#line 77 "ftinf_rh.gperf"
+{   .name="comfortaa",
+    .stem_widths={on, 10, 19, 22, maxp},
+    .stem_scaling={on, 11, 0, end}
+},
+#line 161 "ftinf_rh.gperf"
+{   .name="liberation mono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 18 "ftinf_rh.gperf"
+{   .name="andale mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_scaling={on, 11, 1, end},
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 256 "ftinf_rh.gperf"
+{   .name="verdana",
+    .always_use_100={on, 0, 14, 16, maxp, end},
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 8, 16, 15, 16, 14, 32, 18, 32, 19, 24, end}
+},
+#line 74 "ftinf_rh.gperf"
+{   .name="century gothic",
+    .stem_widths={on, 10, 22, maxp,}
+},
+#line 91 "ftinf_rh.gperf"
+{   .name="courier new",
+    .always_use_100={on, 12, 12, end},
+    .edge_detection={on, 10, 12, end},
+    .m={on, 13, 1, 14, 1, end}
+},
+#line 23 "ftinf_rh.gperf"
+{   .name="arial narrow",
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 185 "ftinf_rh.gperf"
+{   .name="luxi sans",
+    .always_use_100={on, 13, 13, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 225 "ftinf_rh.gperf"
+{   .name="samba",
+    .stem_scaling={on, 11, 0, end}
+},
+#line 233 "ftinf_rh.gperf"
+{   .name="tahoma",
+    .always_use_100={on, 11, 11, 14, maxp, end},
+    .edge_detection={on, 11, 11, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 14, 17, 30, 100, 100, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 7, 32, 8, 32, 9, 32, end},
+},
+#line 164 "ftinf_rh.gperf"
+{   .name="liberation sans narrow",
+    .stem_widths={on,10, 22, maxp,}
+},
+#line 81 "ftinf_rh.gperf"
+{   .name="consolas",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 20, maxp,},
+    .stem_scaling={on, 11, 1, end}
+},
+#line 203 "ftinf_rh.gperf"
+{   .name="open sans",
+    .stem_translating_only={on, 10, 16, 9, 16, end},
+    .stem_widths={on, 10, 20, maxp,}
+},
+#line 167 "ftinf_rh.gperf"
+{   .name="liberation sans",
+    .edge_detection={on, 11, 11, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 8, 8, 32, 9, 32, end},
+    .stem_widths={on,10, 19, maxp,}
+},
+#line 193 "ftinf_rh.gperf"
+{   .name="monaco",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 101 "ftinf_rh.gperf"
+{   .name="cousine",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 176 "ftinf_rh.gperf"
+{   .name="lucida grande",
+    .stem_scaling={on, 13, 1, end},
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on, 10, 16, sw2pv, maxp},
+},
+#line 173 "ftinf_rh.gperf"
+{   .name="lucida console",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 196 "ftinf_rh.gperf"
+{   .name="myriad pro",
+    .stem_scaling={on, 14, 1, 17, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 9, 16, end}
+},
+#line 26 "ftinf_rh.gperf"
+{   .name="arial unicode ms",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+#line 213 "ftinf_rh.gperf"
+{   .name="palatino linotype",
+    .edge_detection={on, 0, 100, end}
+},
+#line 181 "ftinf_rh.gperf"
+{   .name="lucida sans unicode",
+    .stem_translating_only={on, 13, 24, 14, 24, 8, 16, 9, 16, end},
+    .stem_widths={on,10, 16, sw2pv, maxp,}
+},
+#line 140 "ftinf_rh.gperf"
+{   .name="futura",
+    .stem_widths={on, 10, 14, sw2pv, maxp,}
+},
+#line 147 "ftinf_rh.gperf"
+{   .name="georgia",
+    .stem_translating_only={on, 13, 16, 14, 16, 15, 0, end}
+},
+#line 125 "ftinf_rh.gperf"
+{   .name="freemono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 200 "ftinf_rh.gperf"
+{   .name="nina",
+    .stem_scaling={on, 11, 0, 12, 0, 13, 0, end}
+},
+#line 121 "ftinf_rh.gperf"
+{   .name="essential pragmatapro",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 0, 14, 0, end}
+},
+#line 247 "ftinf_rh.gperf"
+{   .name="trebuchet ms",
+    .always_use_100={on, 13, 13, end},
+    .stem_scaling={on, 13, 0, 17, 0, 20, 1, end},
+    .stem_translating_only={on, 10, 16, 11, 0, 8, 32, 9, 32, end},
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 114 "ftinf_rh.gperf"
+{   .name="droid sans mono",
+    .m={on, 12, 0, end}
+},
+#line 104 "ftinf_rh.gperf"
+{   .name="dejavu sans mono",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 7, 16, 8, 32, 9, 16, end}
+},
+#line 57 "ftinf_rh.gperf"
+{   .name="calibri",
+    .always_use_100={on, 23, maxp, end},
+    .stem_scaling={on, 15, 1, 17, 1, 18, 1, end},
+    .stem_translating_only={on, 10, 16, 15, 0, end},
+    .stem_widths={on, 1, 10, 19, maxp,}
+},
+#line 156 "ftinf_rh.gperf"
+{   .name="inconsolata",
+    .stem_scaling={on, 12, 1, 15, 1, end},
+    .stem_translating_only={on, 10, 24, 9, 32, end},
+    .stem_widths={on, 10, 23, maxp,},
+},
+#line 96 "ftinf_rh.gperf"
+{   .name="courier",
+    .always_use_100={on, 0, maxp, end},
+    .m={on, 13, 1, 14, 1, end},
+    .stem_translating_only={on, 13, 16, 15, 0, end}
+},
+#line 128 "ftinf_rh.gperf"
+{   .name="freesans",
+    .always_use_100={on, 0, maxp, end},
+    .edge_detection={on, 11, 11, 13, 13, end},
+    .spacing={on, 10, 12, 18, 18, 30, end},
+    .start={on, 10, 18, 18, 25, 30, end},
+    .stem_scaling={on, 16, 0, end},
+    .stem_translating={on, 11, 32, end},
+    .stem_translating_only={on, 10, 16, 9, 8, end}
+},
+#line 150 "ftinf_rh.gperf"
+{   .name="gill sans",
+    .stem_widths={on, 10, 17, sw2pv, maxp,}
+},
+#line 117 "ftinf_rh.gperf"
+{   .name="droid sans",
+    .always_use_100={on, 12, 12, 15, 15, end},
+    .stem_translating_only={on, 8, 16, 9, 16, end}
+},
+#line 108 "ftinf_rh.gperf"
+{   .name="dejavu sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on, 12, 1, end},
+    .stem_translating_only={on, 8, 16, 15, -20, end}
+},
+#line 219 "ftinf_rh.gperf"
+{   .name="raleway",
+    .stem_scaling={on, 15, 0, end}
+},
+#line 153 "ftinf_rh.gperf"
+{   .name="helvetica cy",
+    .stem_widths={on, 10, 23, maxp,}
+},
+#line 228 "ftinf_rh.gperf"
+{   .name="segoe ui",
+    .always_use_100={on, 11, 12, 14, 14, end},
+    .stem_translating_only={on, 10, 0, 7, 32, 8, 16, 9, 24, end},
+    .stem_widths={on, 10, 23, maxp,}
+},
+#line 48 "ftinf_rh.gperf"
+{   .name="bitstream vera sans mono",
+    .always_use_100={on, 0, maxp, end}
+},
+#line 241 "ftinf_rh.gperf"
+{   .name="times new roman",
+    .always_use_100={on, 14, 14, 16, 16, end},
+    .bearing_correction={0, 100, end},
+    .stem_scaling={on, 17, 1, end},
+    .stem_translating_only={on, 17, 8, end}
+},
+#line 222 "ftinf_rh.gperf"
+{   .name="rokkitt",
+    .stem_widths={on, 10, 21, maxp,}
+},
+#line 143 "ftinf_rh.gperf"
+{   .name="garamond",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+#line 137 "ftinf_rh.gperf"
+{   .name="freeserif",
+    .stem_scaling={on, 13, 1, 17, 1, end}
+},
+#line 189 "ftinf_rh.gperf"
+{   .name="microsoft sans serif",
+    .always_use_100={on, 0, maxp, end},
+    .stem_translating_only={on, 10, 16, 8, 32, 9, 32, end}
+},
+#line 44 "ftinf_rh.gperf"
+{   .name="baskerville",
+    .brightness={on, 0, -20, end},
+    .contrast={on, 0, 25, end}
+},
+#line 51 "ftinf_rh.gperf"
+{   .name="bitstream vera sans",
+    .always_use_100={on, 10, 14, 16, 17, end},
+    .m={on, 12, 0, end},
+    .stem_scaling={on ,12, 1, end},
+    .stem_translating_only={on, 8, 16, end}
+}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register int key = _rules_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          register const struct sa_rules_s *resword;
+
+          switch (key - 3)
+            {
+              case 0:
+                resword = &wordlist[0];
+                goto compare;
+              case 3:
+                resword = &wordlist[1];
+                goto compare;
+              case 7:
+                resword = &wordlist[2];
+                goto compare;
+              case 8:
+                resword = &wordlist[3];
+                goto compare;
+              case 9:
+                resword = &wordlist[4];
+                goto compare;
+              case 10:
+                resword = &wordlist[5];
+                goto compare;
+              case 11:
+                resword = &wordlist[6];
+                goto compare;
+              case 12:
+                resword = &wordlist[7];
+                goto compare;
+              case 13:
+                resword = &wordlist[8];
+                goto compare;
+              case 14:
+                resword = &wordlist[9];
+                goto compare;
+              case 16:
+                resword = &wordlist[10];
+                goto compare;
+              case 17:
+                resword = &wordlist[11];
+                goto compare;
+              case 18:
+                resword = &wordlist[12];
+                goto compare;
+              case 19:
+                resword = &wordlist[13];
+                goto compare;
+              case 21:
+                resword = &wordlist[14];
+                goto compare;
+              case 23:
+                resword = &wordlist[15];
+                goto compare;
+              case 24:
+                resword = &wordlist[16];
+                goto compare;
+              case 26:
+                resword = &wordlist[17];
+                goto compare;
+              case 27:
+                resword = &wordlist[18];
+                goto compare;
+              case 28:
+                resword = &wordlist[19];
+                goto compare;
+              case 29:
+                resword = &wordlist[20];
+                goto compare;
+              case 30:
+                resword = &wordlist[21];
+                goto compare;
+              case 31:
+                resword = &wordlist[22];
+                goto compare;
+              case 32:
+                resword = &wordlist[23];
+                goto compare;
+              case 33:
+                resword = &wordlist[24];
+                goto compare;
+              case 34:
+                resword = &wordlist[25];
+                goto compare;
+              case 35:
+                resword = &wordlist[26];
+                goto compare;
+              case 36:
+                resword = &wordlist[27];
+                goto compare;
+              case 37:
+                resword = &wordlist[28];
+                goto compare;
+              case 38:
+                resword = &wordlist[29];
+                goto compare;
+              case 39:
+                resword = &wordlist[30];
+                goto compare;
+              case 41:
+                resword = &wordlist[31];
+                goto compare;
+              case 43:
+                resword = &wordlist[32];
+                goto compare;
+              case 44:
+                resword = &wordlist[33];
+                goto compare;
+              case 45:
+                resword = &wordlist[34];
+                goto compare;
+              case 46:
+                resword = &wordlist[35];
+                goto compare;
+              case 48:
+                resword = &wordlist[36];
+                goto compare;
+              case 49:
+                resword = &wordlist[37];
+                goto compare;
+              case 52:
+                resword = &wordlist[38];
+                goto compare;
+              case 53:
+                resword = &wordlist[39];
+                goto compare;
+              case 54:
+                resword = &wordlist[40];
+                goto compare;
+              case 58:
+                resword = &wordlist[41];
+                goto compare;
+              case 59:
+                resword = &wordlist[42];
+                goto compare;
+              case 60:
+                resword = &wordlist[43];
+                goto compare;
+              case 61:
+                resword = &wordlist[44];
+                goto compare;
+              case 62:
+                resword = &wordlist[45];
+                goto compare;
+              case 63:
+                resword = &wordlist[46];
+                goto compare;
+              case 64:
+                resword = &wordlist[47];
+                goto compare;
+              case 69:
+                resword = &wordlist[48];
+                goto compare;
+              case 70:
+                resword = &wordlist[49];
+                goto compare;
+              case 71:
+                resword = &wordlist[50];
+                goto compare;
+              case 72:
+                resword = &wordlist[51];
+                goto compare;
+              case 74:
+                resword = &wordlist[52];
+                goto compare;
+              case 75:
+                resword = &wordlist[53];
+                goto compare;
+              case 76:
+                resword = &wordlist[54];
+                goto compare;
+              case 77:
+                resword = &wordlist[55];
+                goto compare;
+              case 78:
+                resword = &wordlist[56];
+                goto compare;
+              case 81:
+                resword = &wordlist[57];
+                goto compare;
+            }
+          return 0;
+        compare:
+          {
+            register const char *s = resword->name;
+
+            if (*str == *s && !strcmp (str + 1, s + 1))
+              return resword;
+          }
+        }
+    }
+  return 0;
+}
+#line 261 "ftinf_rh.gperf"
+
+
+static const sa_rules_t*
+ftinf_rules( const char *name ){
+    if( name ){
+        enum {
+            max_wlen=31
+        };
+        char buf[max_wlen+1];
+        int len=strlen( name );
+        if( len <= max_wlen ){
+            int i;
+            for( i=0; i<len; ++i )
+                buf[i]=tolower( name[i] );
+            buf[len]='\0';
+            return _rules_get( buf, len );
+        }
+    }
+    return NULL;
+}
+/*
+   gperf --output-file=ftinf_rh.c ftinf_rh.gperf
+*/
-- 
2.17.1

